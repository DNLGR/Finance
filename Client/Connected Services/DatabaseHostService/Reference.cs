//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.DatabaseHostService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DatabaseHostService.IDatabaseService", CallbackContract=typeof(Client.DatabaseHostService.IDatabaseServiceCallback))]
    public interface IDatabaseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/Test", ReplyAction="http://tempuri.org/IDatabaseService/TestResponse")]
        void Test(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/Test", ReplyAction="http://tempuri.org/IDatabaseService/TestResponse")]
        System.Threading.Tasks.Task TestAsync(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/Execute", ReplyAction="http://tempuri.org/IDatabaseService/ExecuteResponse")]
        void Execute(string expression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/Execute", ReplyAction="http://tempuri.org/IDatabaseService/ExecuteResponse")]
        System.Threading.Tasks.Task ExecuteAsync(string expression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ExecuteResult", ReplyAction="http://tempuri.org/IDatabaseService/ExecuteResultResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Data.Models.User))]
        object ExecuteResult(string expression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ExecuteResult", ReplyAction="http://tempuri.org/IDatabaseService/ExecuteResultResponse")]
        System.Threading.Tasks.Task<object> ExecuteResultAsync(string expression);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ExsistUser", ReplyAction="http://tempuri.org/IDatabaseService/ExsistUserResponse")]
        Data.Models.User ExsistUser(string logn, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/ExsistUser", ReplyAction="http://tempuri.org/IDatabaseService/ExsistUserResponse")]
        System.Threading.Tasks.Task<Data.Models.User> ExsistUserAsync(string logn, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/AppendUser", ReplyAction="http://tempuri.org/IDatabaseService/AppendUserResponse")]
        void AppendUser(Data.Models.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDatabaseService/AppendUser", ReplyAction="http://tempuri.org/IDatabaseService/AppendUserResponse")]
        System.Threading.Tasks.Task AppendUserAsync(Data.Models.User user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDatabaseService/DataCallBack")]
        void DataCallBack(string obj);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDatabaseServiceChannel : Client.DatabaseHostService.IDatabaseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DatabaseServiceClient : System.ServiceModel.DuplexClientBase<Client.DatabaseHostService.IDatabaseService>, Client.DatabaseHostService.IDatabaseService {
        
        public DatabaseServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DatabaseServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DatabaseServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DatabaseServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Test(string message) {
            base.Channel.Test(message);
        }
        
        public System.Threading.Tasks.Task TestAsync(string message) {
            return base.Channel.TestAsync(message);
        }
        
        public void Execute(string expression) {
            base.Channel.Execute(expression);
        }
        
        public System.Threading.Tasks.Task ExecuteAsync(string expression) {
            return base.Channel.ExecuteAsync(expression);
        }
        
        public object ExecuteResult(string expression) {
            return base.Channel.ExecuteResult(expression);
        }
        
        public System.Threading.Tasks.Task<object> ExecuteResultAsync(string expression) {
            return base.Channel.ExecuteResultAsync(expression);
        }
        
        public Data.Models.User ExsistUser(string logn, string password) {
            return base.Channel.ExsistUser(logn, password);
        }
        
        public System.Threading.Tasks.Task<Data.Models.User> ExsistUserAsync(string logn, string password) {
            return base.Channel.ExsistUserAsync(logn, password);
        }
        
        public void AppendUser(Data.Models.User user) {
            base.Channel.AppendUser(user);
        }
        
        public System.Threading.Tasks.Task AppendUserAsync(Data.Models.User user) {
            return base.Channel.AppendUserAsync(user);
        }
    }
}
